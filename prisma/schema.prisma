generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Outlet {
  id           Int            @id @default(autoincrement())
  name         String
  address      String
  email        String         @unique
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  staffCount   Int            @default(0)
  phone        String?
  expenses     Expense[]
  inventories  Inventory[]
  orders       Order[]
  products     Product[]
  StockHistory StockHistory[]
  users        User[]
}


  model User {
    id           Int              @id @default(autoincrement())
    email        String           @unique
    name         String
    password     String
    role         Role             @default(CUSTOMER)
    outletId     Int?
    createdAt    DateTime         @default(now())
    phone        String?
    customerInfo CustomerDetails?
    staffInfo    StaffDetails?
    outlet       Outlet?          @relation(fields: [outletId], references: [id], onDelete: Cascade)
  }

model StaffDetails {
  id          Int               @id @default(autoincrement())
  userId      Int               @unique
  staffRole   String            @default("Staff")
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions StaffPermission[]
}

model StaffPermission {
  id        Int            @id @default(autoincrement())
  staffId   Int
  type      PermissionType
  isGranted Boolean        @default(false)
  staff     StaffDetails   @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model CustomerDetails {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  yearOfStudy Int
  user        User     @relation(fields: [userId], references: [id], onDelete:  Cascade)
  degree     typeOfDegree?
  bio         String?
  orders      Order[]
  tickets     Ticket[]
  wallet      Wallet?
  cart        Cart?
}

model Cart {
  id          Int         @id @default(autoincrement())
  customerId  Int         @unique
  customer    CustomerDetails @relation(fields: [customerId], references: [id], onDelete: Cascade)
  items       CartItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(name: "ProductCartItems", fields: [productId], references: [id], onDelete: Cascade)
  @@unique([cartId, productId])
}


model Product {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  price        Float
  imageUrl     String?
  outletId     Int
  category     Category
  inventory    Inventory?
  orderItems   OrderItem[]     @relation("ProductToOrderItems")
  outlet       Outlet          @relation(fields: [outletId], references: [id], onDelete: Cascade)
  StockHistory StockHistory[]
  cartItems    CartItem[]      @relation(name: "ProductCartItems")

}


model Inventory {
  id        Int     @id @default(autoincrement())
  productId Int     @unique
  outletId  Int
  quantity  Int
  threshold Int
  outlet    Outlet  @relation(fields: [outletId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model StockHistory {
  id        Int         @id @default(autoincrement())
  productId Int
  outletId  Int
  quantity  Int
  action    StockAction
  timestamp DateTime    @default(now())
  outlet    Outlet      @relation(fields: [outletId], references: [id], onDelete: Cascade)
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                Int              @id @default(autoincrement())
  customerId        Int?
  outletId          Int
  totalAmount       Float
  paymentMethod     PaymentMethod
  status            OrderStatus
  createdAt         DateTime         @default(now())
  type              OrderType
  deliveryDate      DateTime?
  deliverySlot      DeliverySlot?
  isPreOrder        Boolean          @default(false)
  razorpayPaymentId String?
  customer          CustomerDetails? @relation(fields: [customerId], references: [id])
  outlet            Outlet           @relation(fields: [outletId], references: [id], onDelete: Cascade)
  items             OrderItem[]
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float
  status    OrderItemStatus @default(NOT_DELIVERED)
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation("ProductToOrderItems", fields: [productId], references: [id], onDelete: Cascade)
}

model Wallet {
  id             Int                 @id @default(autoincrement())
  customerId     Int                 @unique
  balance        Float               @default(0)
  totalRecharged Float               @default(0)
  totalUsed      Float               @default(0)
  lastRecharged  DateTime?
  lastOrder      DateTime?
  customer       CustomerDetails     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  transactions   WalletTransaction[]
}

model WalletTransaction {
  id        Int             @id @default(autoincrement())
  walletId  Int
  amount    Float
  method    PaymentMethod
  createdAt DateTime        @default(now())
  status    WalletTransType
  wallet    Wallet          @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Expense {
  id          Int           @id @default(autoincrement())
  outletId    Int
  description String
  category    String
  amount      Float
  method      PaymentMethod
  paidTo      String
  expenseDate DateTime
  createdAt   DateTime      @default(now())
  outlet      Outlet        @relation(fields: [outletId], references: [id], onDelete: Cascade)
}

model Ticket {
  id             Int             @id @default(autoincrement())
  customerId     Int
  title          String
  description    String
  priority       Priority
  status         TicketStatus    @default(OPEN)
  createdAt      DateTime        @default(now())
  resolvedAt     DateTime?
  resolutionNote String?
  customer       CustomerDetails @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Coupon {
  id            Int           @id @default(autoincrement())
  code          String        @unique
  description   String
  rewardValue   Float
  minOrderValue Float
  validFrom     DateTime
  validUntil    DateTime
  isActive      Boolean       @default(true)
  usageLimit    Int
  usedCount     Int           @default(0)
  createdAt     DateTime      @default(now())
  usages        CouponUsage[]
}

model CouponUsage {
  id       Int      @id @default(autoincrement())
  couponId Int
  orderId  Int
  userId   Int
  amount   Float
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id])
}

enum typeOfDegree{
  UG 
  PG
}
enum OrderType {
  MANUAL
  APP
}

enum OrderItemStatus {
  NOT_DELIVERED
  DELIVERED
}

enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum PermissionType {
  BILLING
  PRODUCT_INSIGHTS
  REPORTS
  INVENTORY
}

enum PaymentMethod {
  UPI
  CARD
  CASH
  WALLET
}

enum OrderStatus {
  PENDING
  DELIVERED
  PARTIALLY_DELIVERED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Category {
  Meals
  Starters
  Desserts
  Beverages
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum StockAction {
  ADD
  REMOVE
  UPDATE
}

enum WalletTransType {
  RECHARGE
  DEDUCT
}

enum DeliverySlot {
  SLOT_11_12
  SLOT_12_13
  SLOT_13_14
  SLOT_14_15
  SLOT_15_16
  SLOT_16_17
}
